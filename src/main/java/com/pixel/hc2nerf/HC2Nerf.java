package com.pixel.hc2nerf;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import org.slf4j.Logger;

import com.mojang.logging.LogUtils;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.mojang.brigadier.Command;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;

import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.core.component.DataComponents;
import net.minecraft.commands.Commands;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.food.FoodProperties;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;
import net.neoforged.fml.config.ModConfig;
import net.neoforged.fml.event.lifecycle.FMLCommonSetupEvent;
import net.neoforged.neoforge.event.RegisterCommandsEvent;
import net.neoforged.neoforge.event.ModifyDefaultComponentsEvent;
import net.neoforged.fml.loading.FMLEnvironment;

import net.neoforged.neoforge.common.NeoForge;


@Mod(HC2Nerf.MODID)
public class HC2Nerf {
    public static final String MODID = "hc2nerf";
    private static final Logger LOGGER = LogUtils.getLogger();

    public HC2Nerf(IEventBus modEventBus, ModContainer modContainer) {
        modEventBus.addListener(this::commonSetup);
        Objects.requireNonNull(modContainer.getEventBus()).addListener(this::modifyComponentsLow);
        NeoForge.EVENT_BUS.addListener(this::registerCommands);
        modContainer.registerConfig(ModConfig.Type.COMMON, Config.SPEC);
    }

    private void commonSetup(final FMLCommonSetupEvent event) {
        LOGGER.info("nomnomnom :3");
    }

    public void modifyComponentsLow(ModifyDefaultComponentsEvent event) {
        JsonElement automaticData = loadFile("food-data/autogenerated.json");
        JsonElement manualData = loadFile("food-data/manual.json");
        JsonElement minecraftData = loadFile("food-data/minecraftnerf.json");
        JsonElement gbData = loadFile("food-data/gamebreaking.json");

        JsonArray itemsToChange = new JsonArray();
        
        if (Config.nerfPams) {
            JsonObject aObj = automaticData.getAsJsonObject();
            JsonObject mObj = manualData.getAsJsonObject();
            JsonArray aitemsArray = aObj.getAsJsonArray("items");
            JsonArray mitemsArray = mObj.getAsJsonArray("items");
            itemsToChange = addArrays(itemsToChange, aitemsArray);
            itemsToChange = addArrays(itemsToChange, mitemsArray);
        }

        if (Config.nerfMinecraft) {
            JsonArray minecraftArray = minecraftData.getAsJsonObject().getAsJsonArray("items");
            itemsToChange = addArrays(itemsToChange, minecraftArray);
        }
        if (Config.nerfGamebreaking) {
            JsonArray gbArray = gbData.getAsJsonObject().getAsJsonArray("items");
            itemsToChange = addArrays(itemsToChange, gbArray);
        }

        // edit food values
        for (JsonElement jsonitem : itemsToChange) {
            JsonObject itemObj = jsonitem.getAsJsonObject();
            String id = itemObj.get("id").getAsString();
            int hunger = itemObj.get("hunger").getAsInt();
            float saturation = itemObj.get("saturation").getAsFloat();

            String[] split = id.split(":");
            Item i = BuiltInRegistries.ITEM.get(ResourceLocation.fromNamespaceAndPath(split[0], split[1]));
            if (i.toString().equals("minecraft:air"))
                continue; // in case some addon mods arent installed

            if (hunger == 0 && saturation == 0.0f) {
                    event.modify(i, builder -> {
                        builder.remove(DataComponents.FOOD);
                    });
                    continue;
            }

            ItemStack stack = new ItemStack(i);
            FoodProperties oldprops = stack.getFoodProperties(null);
            FoodProperties.Builder newprops = new FoodProperties.Builder().nutrition(hunger)
                    .saturationModifier(saturation);
            if (oldprops != null) {
                for (FoodProperties.PossibleEffect e : oldprops.effects()) {
                    newprops.effect(e.effect(), e.probability());
                }
                if(oldprops.canAlwaysEat()) {
                    newprops.alwaysEdible();
                }
                if (oldprops.eatSeconds() != 1.6F) {
                    newprops.fast();
                }
            }
            event.modify(i, builder -> {
                builder.set(DataComponents.FOOD, newprops.build());
            });
        }
    }

    private JsonArray addArrays(JsonArray a, JsonArray b) {
        for (JsonElement e : b) {
            a.add(e);
        }
        return a;
    }

    private JsonElement loadFile(String fileName) {
        InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);
        InputStreamReader reader = new InputStreamReader(stream);
        if (stream == null) {
            LOGGER.error("Failed to find" + fileName);
        }
        JsonElement r = JsonParser.parseReader(reader);
        if (!r.isJsonObject()) {
            LOGGER.error(fileName + " could not be loaded! many food items will not be changed!!");
        }
        return r;
    }

    @SubscribeEvent
    public void registerCommands(RegisterCommandsEvent event) {
        if (FMLEnvironment.production)
            return;

        event.getDispatcher().register(
                Commands.literal("hc2nerf")
                        .then(Commands.argument("cmd", StringArgumentType.word())
                                .suggests((c, b) -> getSuggestions(b))
                                .executes(context -> {
                                    String cmd = StringArgumentType.getString(context, "cmd");
                                    if (cmd.equals("dumpItems")) {
                                        dumpItems(context);
                                    }
                                    return Command.SINGLE_SUCCESS;
                                })));
    }

    private static CompletableFuture<Suggestions> getSuggestions(SuggestionsBuilder builder) {
        builder.suggest("dumpItems");
        return builder.buildFuture();
    }

    private static void dumpItems(CommandContext<CommandSourceStack> context) {

        ServerPlayer p = context.getSource().getPlayer();
        if (p == null)
            return;

        p.sendSystemMessage(Component.literal("Preparing dump..."));
        try {
            BufferedWriter w = new BufferedWriter(new FileWriter("1.21.1_food.json"));
            w.write("");
            w.append("{\n");
            w.append(" \"items\": [\n");
            for (Item item : BuiltInRegistries.ITEM) {
                ItemStack stack = new ItemStack(item);
                FoodProperties food = item.getFoodProperties(stack, null);
                if (food != null) {
                    int foodamt = food.nutrition();
                    float saturation = food.saturation();
                    // LOGGER.info(item.toString() + foodamt + "-" + saturation);
                    String id = item.toString();
                    if (id.contains("minecraft")) {
                        w.append(" " + "[\"" + id + "\", " + foodamt + ", " + saturation + "],\n");
                    }
                }
            }
            w.append(" ]\n");
            w.append("}");
            w.close();
            p.sendSystemMessage(Component.literal("Finished! :steamhappy:"));
        } catch (IOException e) {
            p.sendSystemMessage(Component.literal("Failed! " + e.getMessage()));
        }
    }

}